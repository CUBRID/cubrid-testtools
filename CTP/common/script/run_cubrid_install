#!/bin/bash
# 
# Copyright (c) 2016, Search Solution Corporation. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
# 
#   * Redistributions of source code must retain the above copyright notice, 
#     this list of conditions and the following disclaimer.
# 
#   * Redistributions in binary form must reproduce the above copyright 
#     notice, this list of conditions and the following disclaimer in 
#     the documentation and/or other materials provided with the distribution.
# 
#   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products 
#     derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
#

export CTP_HOME=$(cd $(dirname $(readlink -f $0))/../..; pwd)
. ${CTP_HOME}/common/script/util_file_param.sh

set -x
gUrl=
sUrl=
dUrl=
cUrl=
vUrl=
pOs=
tCat=
buildType=


usage()
{
    echo "Usage: `basename $0` [url] [-s|--role-compat-server url_1 url_2] 
								[-d|--role-compat-driver url_1 url_2] 
								[-c|--role-coverage url_1 url_2 ]
								[-ur|--role-unittest-release url]
								[-ud|--role-unittest-debug url]"
    exit 1
}

if [ $# -eq 0 ]
then
	usage
else
	gUrl=$1
	tCat="general"
fi

while [ $# -ge 1 ];do
	case $1 in
	    -s|--role-compat-server)
		shift
		gUrl=$1
		sUrl=$1
		dUrl=$2
		tCat="compat"
		;;
	    -d|--role-compat-driver)
		shift
		gUrl=$1
		dUrl=$1
		sUrl=$2
		tCat="compat"
		;;
	    -c|--role-coverage)
		shift
		gUrl=$1
		vUrl=$1
		cUrl=$2
		tCat="coverage"
		;;
		-ur|--role-unittest-release)
		shift
		gUrl=$1
		tCat="unit-release"
		;;
	    -ud|--role-unittest-debug)
		shift
		gUrl=$1
		tCat="unit-debug"
		;;
	    \?)
		shift
		usage
		;;
	esac
	shift
done

function getDir()
{
        cd $(dirname ${0})
        script_path=`pwd`
}

function parseURL()
{
    url=$1
    if [ "$url" ]
    then
	buildType=${url/*.}
    else
	buildType="unknown"
    fi
}

function goToInstallationDirectory()
{
    if [ "$CUBRID" ]
    then
        cd $CUBRID
	if [ $? -eq 0 ];then
        	cd ..
	else
		cd $HOME
	fi
    else
        cd $HOME
    fi
}

function IsGitExtensionBuild()
{
   buildFile=$1

   buildNumber=`echo $buildFile|grep -Pom 1 '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,7}'`
   startNumber="0100010000006858"
   f1=`echo $buildNumber|awk -F '.' '{print $1}'`
   f2=`echo $buildNumber|awk -F '.' '{print $2}'`
   f3=`echo $buildNumber|awk -F '.' '{print $3}'`
   f4=`echo $buildNumber|awk -F '.' '{print $4}'`
   f11=`echo $f1|awk '{printf("%03d", $0)}'`
   f22=`echo $f2|awk '{printf("%03d", $0)}'`
   f33=`echo $f3|awk '{printf("%03d", $0)}'`
   f44=`echo $f4|awk '{printf("%07d", $0)}'` 
 
   curNumber="${f11}${f22}${f33}${f44}"
   if [ $curNumber -ge $startNumber ];
   then
        echo true
   else
        echo false
   fi
}

function print_current_machine_status ()
{
  echo ""
  ps -u $USER f
  echo ""
  df -h
  echo ""
}

function InstallBuildBySh()
{
    build_url=$1
    buildFile=${build_url##*/}
    cub="CUBRID"
    curDir=`pwd`
    goToInstallationDirectory

    echo ""
    echo "=====install CUBRID $buildFile =========="
    echo ""
    rm $buildFile >/dev/null 2>&1
    wget -t 3 -T 120 $build_url
    if [ $? -eq 0 ]
    then
		chmod 777 $buildFile
    else
    	echo "[ERROR]: Please confirm build url ${build_url}"
	print_current_machine_status
    fi
    
    cubrid service stop >/dev/null 2>&1
    #sleep 2
    if [ -d $cub ]
    then
            rm -rf CUBRID
    fi

    if [ "`IsGitExtensionBuild $buildFile`" == "true" ];then
	   mkdir -p CUBRID
           cp $buildFile CUBRID
	   cd CUBRID

           sh  $buildFile >/dev/null <<EOF
y
n

EOF
	   if [ $? -ne 0 ];then
	   		echo "[ERROR]: Please confirm build file name - $buildFile"
			print_current_machine_status
	   fi
	   rm $buildFile
	   cd ..
    else
            sh $buildFile > /dev/null <<EOF
yes


EOF
	if [ $? -ne 0 ];then
	   		echo "[ERROR]: Please confirm build file name - $buildFile"
 			print_current_machine_status
	fi
    . ~/.cubrid.sh
    fi
    rm $buildFile
    cd $curDir
}

function InstallBuildByPackage()
{
    command=$1
    build_url=$2
    commandOpts=$3
    buildFile=${build_url##*/}
    cub="CUBRID"
    curDir=`pwd`
    goToInstallationDirectory

    echo ""
    echo "=====install CUBRID $buildFile =========="
    echo ""
    rm $buildFile >/dev/null 2>&1
    cubrid service stop >/dev/null 2>&1
    if [ -d $cub ]
    then
            rm -rf CUBRID/*
    else
	    mkdir -p CUBRID
    fi
    wget -t 3 -T 120 $build_url
    if [ $? -ne 0 ];then
    	echo "[ERROR]: Please confirm build url - ${build_url}"
	print_current_machine_status
    fi
    
    eval $command $buildFile $commandOpts ./CUBRID
    if [ $? -ne 0 ];then
    	echo "[ERROR]: Please confirm build file - ${buildFile}"
	print_current_machine_status
    fi
    
    if [ -d ./CUBRID/CUBRID ]; then
		mv ./CUBRID/CUBRID/* ./CUBRID
		rm -rf ./CUBRID/CUBRID
    fi
    if [ ! -d ./CUBRID/databases ]; then
	    mkdir ./CUBRID/databases
    fi
	
    rm $buildFile
    cd $curDir
}

function InstallBuildForGeneral()
{
    url=$1
    parseURL $url
    if [ "$buildType" == "sh" ]
    then
	InstallBuildBySh $url
    elif [ "$buildType" == "zip" ]
    then
	InstallBuildByPackage "unzip " $url "-d"
    elif [ "$buildType" == "gz" ]
    then
	InstallBuildByPackage "tar zvxf " $url "-C"
    elif [ "$buildType" == "tar" ]
    then
	InstallBuildByPackage "tar vxf " $url "-C"
    elif [ "$buildType" == "rpm" ]
    then
	echo "TODO"
    else
	 echo "Please confirm your build URL!"
	 exit
    fi

}

function InstallBuildForCompat()
{
    curDir=`pwd` 
    getDir  
    sh util_compat_test.sh -sl $1 -dl $2
    echo "Test_Build_URL=$gUrl" >> $CUBRID/qa.conf
    cd $curDir
}

function checkEnvironmentVariable()
{
     curDir=`pwd`
     isGCOVPREFIX_RELATED=`env|grep GCOV_PREFIX|wc -l`
     if [ $isGCOVPREFIX_RELATED -ne 2 ]
     then
          sed -i '/GCOV_PREFIX/d' $HOME/.bash_profile
          echo "export GCOV_PREFIX=$HOME" >> $HOME/.bash_profile
          echo "export GCOV_PREFIX_STRIP=2" >> $HOME/.bash_profile
     fi
     cd $HOME
     source .bash_profile

     cd $curDir
}

function InstallBuildForCoverage()
{
    build_url=$1
    source_url=$2
    buildFile=${build_url##*/}
    curDir=`pwd`
    cub_folder_name="CUBRID"
    goToInstallationDirectory
    cubrid service stop >/dev/null 2>&1
    echo ""
    echo "=====install CUBRID $buildFile =========="
    echo ""
    if [ -f "$buildFile" ];then
	rm $buildFile >/dev/null 2>&1
    fi
  
    if [ -d "$cub_folder_name" ];then
	rm -rf $cub_folder_name
        mkdir -p $cub_folder_name 
    else
	mkdir -p $cub_folder_name
    fi

    cd $cub_folder_name
    wget -t 3 -T 120 $build_url
    if [ $? -ne 0 ]
    then
	echo ""
        echo "[ERROR]: Please confirm the build url ${build_url}"
	print_current_machine_status
	exit -1
    fi
    
    tar zvxfm $buildFile
    cd -
    mkdir -p build
    cd build
    cov_source_file_name=${source_url##*/}
    build_src_folder_full_name="${cov_source_file_name%-gcov*}" 
	
    if [ -f "$cov_source_file_name" ];then
	rm $cov_source_file_name  >/dev/null 2>&1
    fi

    if [ -d "$build_src_folder_full_name" ];then
        rm -rf $build_src_folder_full_name
    fi

    mkdir -p $build_src_folder_full_name

    cd $build_src_folder_full_name
    wget -t 3 -T 120 $source_url
    if [ $? -ne 0 ];then
	echo ""
	echo "[ERROR] Please confirm the coverage source build url ${source_url}"
	print_current_machine_status
	exit -1
    fi

    
    if [ -f "$cov_source_file_name" ];then
    	tar zvxfm $cov_source_file_name
    	rm $cov_source_file_name
    fi

    checkEnvironmentVariable
    cd $curDir
    echo INSTALL `date '+%Y%m%d%H%M%s'` $@ 2>&1 | tee -a $HOME/.qacoverage
}

function needDevToolSet()
{
    version=$1
    major_version=$(echo $version | cut -d . -f 1)
    minor_version=$(echo $version | cut -d . -f 2)
    if [ $major_version -ge 10 -a $minor_version -ge 2 ];then
	echo true
    else
	echo false
    fi 

}

function change_url_to_local {
    local search_file=$1
    local search_key=$2
    local cache_dir=$HOME/CACHE
    local url=`grep URL ${search_file} | grep "${search_key}" | awk -F "URL" '{print $NF}'`
    local file=`echo $url| awk -F '/' '{print $NF}'`
    if [ "$url" == "" -o "$file" == "" ]; then
        return 1
    fi
    if [ ! -f ${cache_dir}/$file ]; then
        (mkdir -p $cache_dir 2>/dev/null; cd $cache_dir; wget -t 5 -T 120 $url >/dev/null 2>&1)
    fi

    if [ -f ${cache_dir}/$file ]; then
        sed -i "s#URL *$url#URL ${cache_dir}/$file#g" ${search_file}
        return 0
    fi
    return 1
}


function BuildAndInstallForUnitTest()
{
    build_url=$1
    buildFile=${build_url##*/}
    buildName=${buildFile%%.tar*}
    cub="cubrid"
    curDir=`pwd`
    cd $HOME
    echo ""
    echo "=====install Unit Test Build With $buildFile =========="
    echo ""

    cmake >/dev/null 2>&1
    [ $? -ne 0 ] && echo "Please make sure CMAKE is installed!" && exit 0    

    rm $buildFile >/dev/null 2>&1
    wget -t 3 -T 120 $build_url
    if [ $? -ne 0 ];then
	echo "[ERROR] download build fail with url $build_url"
	print_current_machine_status
    fi

    if [ -d $cub ]
    then
            rm -rf $cub
    fi
    
    mkdir -p $cub
    tar -zvxf $buildFile 
    cp -rf ${buildName}/* $cub/  
    cd $cub
    if [ -f VERSION ]; then
    	version_file=VERSION
    elif [ -f VERSION-DIST ]; then
    	version_file=VERSION-DIST
    fi
    version=$(cat $version_file)

    change_url_to_local ./CMakeLists.txt "http://thrysoee.dk/editline/"  
    change_url_to_local ./CMakeLists.txt "https://github.com/Tencent/rapidjson/archive/"  

    configure_options="-DCMAKE_BUILD_TYPE=Debug"
    if [ "$tCat" == "unit-release" ];then
	configure_options="-DCMAKE_BUILD_TYPE=RelWithDebInfo"
    fi
    	 
    if [ "`needDevToolSet ${version}`" == "true" ];then
	[ ! -f "/opt/rh/devtoolset-6/enable" ] && echo "[Error]: devtoolset-6 is not found" && exit 1
	(
	  source /opt/rh/devtoolset-6/enable
	  cmake ${configure_options}
          make -j
	)
    else
	  cmake ${configure_options}
          make -j
    fi 
    
    cd $HOME   
    rm $buildFile
    rm -rf ${buildName}
    echo "INSTALL `date '+%Y%m%d%H%M%s'` $@" 2>&1 |tee -a $HOME/.unitTestInstall.log
    cd $curDir
}

if [ "$tCat" == "general" ]
then
     InstallBuildForGeneral $gUrl 2>&1 | tee $HOME/.buildinstall.log
elif [ "$tCat" == "compat" ]
then
     InstallBuildForCompat $sUrl $dUrl 2>&1 | tee $HOME/.buildinstall.log
elif [ "$tCat" == "coverage" ]
then
     InstallBuildForCoverage $vUrl $cUrl 2>&1 | tee $HOME/.qacoverage.log
elif [ "$tCat" == "unit-release" ] || [ "$tCat" == "unit-debug" ];then
     BuildAndInstallForUnitTest $gUrl 2>&1 | tee $HOME/.unitTestInstall.log
else
     echo "[ERROR]: Please confirm your parameters - $@ !!"
fi

autoConfigCUBRIDByMKEY


